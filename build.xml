<?xml version="1.0" encoding="utf-8" ?>
<project name="badger" default="resolve" basedir="." 
	xmlns:ivy="antlib:org.apache.ivy.ant">
	<property name="source" location="src/main/java" />
	<property name="resources" location="src/main/resources" />
	<property name="bin" location="bin" />
	<property name="source-test" location="src/test/java" />
	<property name="resources-test" location="src/test/resources" />
	<property name="lib-source" location="lib" />
	<property name="dist-dir" location="dist" />
	<property name="reports-dir" location="reports" />

	<path id="project.class.path">
		<pathelement location="${bin}" />
		<fileset dir="${lib-source}" includes="*.jar" />
		<fileset dir="${lib-source}" includes="**/*.jar" />
	</path>

	<target name="compile" depends="resolve" description="Compile java source to bytecode">
		<mkdir dir="${bin}" />
		<javac srcdir="${source}" includes="**" encoding="utf-8" destdir="${bin}" source="1.8" target="1.8" nowarn="true" debug="true" debuglevel="lines,vars,source">
			<classpath refid="project.class.path" />
		</javac>
		<copy todir="${bin}">
			<fileset dir="${source}" excludes="**/*.java" />
			<fileset dir="${resources}" />
		</copy>
	</target>

	<target name="jar" depends="compile, javadoc" description="Create the jar files">
		<jar jarfile="${dist-dir}/badger.jar">
			<fileset dir="${bin}" />
			<fileset dir="${resources}" />
		</jar>
		<jar jarfile="${dist-dir}/badger-sources.jar" basedir="${source}"/>
		<jar jarfile="${dist-dir}/badger-javadoc.jar" basedir="javadoc"/>
	</target>

	<target name="resolve" description="retrieve dependencies with ivy">
		<ivy:retrieve pattern="${lib-source}/[conf]/[artifact]-([classifier]-)[revision].[ext]" sync="true" />
	</target>

	<target name="clean" description="Cleans this project">
		<delete dir="${bin}" failonerror="false" />
		<delete dir="${reports-dir}" failonerror="false" />
		<delete dir="javadoc" failonerror="false" />
	</target>

    <target name="test" 
        xmlns:jacoco="antlib:org.jacoco.ant">
        <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml" classpathref="project.class.path"/>
		<!-- Clean and compile including tests -->
		<delete dir="${bin}" failonerror="false" />
		<mkdir dir="${bin}" />
		<javac srcdir="${source}" includes="**" encoding="utf-8" destdir="${bin}" source="1.8" target="1.8" nowarn="true" debug="true" debuglevel="lines,vars,source">
			<classpath refid="project.class.path" />
		</javac>
		<copy todir="${bin}">
			<fileset dir="${source}" excludes="**/*.java" />
			<fileset dir="${resources}" />
		</copy>
		<javac srcdir="${source-test}" includes="**" encoding="utf-8" destdir="${bin}" source="1.8" target="1.8" nowarn="true" debug="true" debuglevel="lines,vars,source">
			<classpath refid="project.class.path" />
		</javac>
		<copy todir="${bin}">
			<fileset dir="${source-test}" excludes="**/*.java" />
			<fileset dir="${resources-test}" />
		</copy>
		<!-- Execute tests -->
		<mkdir dir="${reports-dir}/junit" />
        <jacoco:coverage destfile="${reports-dir}/tests.exec">
			<java classname="org.junit.platform.console.ConsoleLauncher" fork="true" failonerror="false">
				<classpath>
					<path refid="project.class.path" />
				</classpath>
				<arg value="--scan-classpath"/>
				<arg line="--reports-dir ${reports-dir}/junit"/>
			</java>
        </jacoco:coverage>
		<!--Report tests -->
		<mkdir dir="${reports-dir}/junit" />
		<junitreport todir="${reports-dir}/junit">
			<fileset dir="${reports-dir}/junit">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="${reports-dir}/junit/html"/>
		</junitreport>
        <jacoco:report>
            <executiondata>
                <file file="${reports-dir}/tests.exec" />
            </executiondata>
            <structure name="throttling-utils tests">
                <classfiles>
                    <fileset dir="${bin}" />
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${source}" />
                </sourcefiles>
            </structure>
            <html destdir="${reports-dir}/jacoco-html" />
            <csv destfile="${reports-dir}/jacoco-report.csv" />
            <xml destfile="${reports-dir}/jacoco-report.xml" />
        </jacoco:report>
	</target>

	<target name='javadoc' description='Generate javadoc'>
		<javadoc use='true' author='true' version='true' access='package' sourcepath='${source}' packagenames='*.*' destdir='javadoc' windowtitle='${project-name} // ${STAMP}' noqualifier='java.*:javax.*:com.sun.*'>
			<classpath refid='project.class.path' />
		</javadoc>
	</target>

	<target name="spotbugs" description="Runs spotbugs against the sources">
		<fail message="Jar file not found - run target jar first!">
			<condition>
				<not>
					<available file="${dist-dir}/badger.jar" />
				</not>
			</condition>
		</fail>
		<taskdef resource="edu/umd/cs/findbugs/anttask/tasks.properties" classpathref="project.class.path"/>
		<mkdir dir="${reports-dir}" />
		<spotbugs output="xml" outputFile="${reports-dir}/findbugs.xml" classpathref="project.class.path">
			<class location="${dist-dir}/badger.jar" />
			<sourcePath path="${source}" />
			<auxClasspath refid="project.class.path" />
		</spotbugs>
	</target>

	<target name="checkstyle" description="Runs checkstyle against the sources">
		<mkdir dir="${reports-dir}" />
		<taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" classpathref="project.class.path"/>
		<checkstyle config="checkstyle-config.xml" classpathref="project.class.path">
			<fileset dir="${source}" includes="**/*.java"/>
			<formatter type="xml" toFile="${reports-dir}/checkstyle-result.xml"/>
		</checkstyle>
	</target>

	<target name="badge" description="Create project badges">
		<taskdef resource="taskdef.xml" classpathref="project.class.path"/>
		<badger inFile="${reports-dir}/findbugs.xml" outDir="${reports-dir}" />
		<badger inFile="${reports-dir}/checkstyle-result.xml" outDir="${reports-dir}" />
		<badger inFile="${reports-dir}/jacoco-report.xml" outDir="${reports-dir}" />
	</target>
</project>
